class TaskScheduler {
    constructor() {
        this.queue = [];
        this.running = false;
    }

    addTask(task) {
        return new Promise((resolve, reject) => {
            this.queue.push({ task, resolve, reject });
            if (!this.running) {
                this.runNextTask();
            }
        });
    }

    async runNextTask() {
        if (this.queue.length > 0) {
            this.running = true;
            const { task, resolve, reject } = this.queue.shift();
            try {
                const result = await task();
                resolve(result);
            } catch (error) {
                reject(error);
            } finally {
                this.running = false;
                this.runNextTask();
            }
        }
    }
}

// Example usage
const scheduler = new TaskScheduler();

function delay(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
}

function exampleTask(message) {
    return async () => {
        console.log(`Task started: ${message}`);
        await delay(2000);
        console.log(`Task completed: ${message}`);
        return `${message} done`;
    };
}

async function runExample() {
    const task1 = scheduler.addTask(exampleTask("Task 1"));
    const task2 = scheduler.addTask(exampleTask("Task 2"));
    const task3 = scheduler.addTask(exampleTask("Task 3"));

    try {
        const result1 = await task1;
        console.log(result1);

        const result2 = await task2;
        console.log(result2);

        const result3 = await task3;
        console.log(result3);
    } catch (error) {
        console.error(`Error: ${error.message}`);
    }
}

runExample();
